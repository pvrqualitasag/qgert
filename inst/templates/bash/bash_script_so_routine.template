#!/bin/bash
#' ---
#' title: __TITLE__
#' date:  __STARTDATE__
#' author: __AUTHOR__
#' ---
#' ## Purpose
#' __PURPOSE__ {Write a paragraph about what problems are solved with this script.}
#'
#' ## Description
#' __DESCRIPTION__ {Write a paragraph about how the problems are solved.}
#'
#' ## Details
#' __DETAILS__ {Give some more details here.}
#'
#' ## Example
#' __EXAMPLE__ {Specify an example call of the script.}
#'
#' ## Set Directives
#' General behavior of the script is driven by the following settings
#+ bash-env-setting, eval=FALSE
set -o errexit    # exit immediately, if single command exits with non-zero status
set -o nounset    # treat unset variables as errors
set -o pipefail   # return value of pipeline is value of last command to exit with non-zero status
                  # hence pipe fails if one command in pipe fails

#' ## Global Constants
#' This section stores the directory of this script, the name of this script and the
#' hostname in a variable. Both variables are important for logfiles to be able to
#' trace back which output was produced by which script and on which server.
#+ script-files, eval=FALSE
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
SCRIPT=$(basename ${BASH_SOURCE[0]})
SERVER=`hostname`


#' ## Functions
#' The following definitions of general purpose functions are local to this script.
#'
#' ### Start Message
#' The following function produces a start message showing the time
#' when the script started and on which server it was started.
#+ start-msg-fun, eval=FALSE
start_msg () {
    echo "********************************************************************************"
    echo "Starting $SCRIPT at: "`date +"%Y-%m-%d %H:%M:%S"`
    echo "Server:  $SERVER"
    echo ""
}

#' ### End Message
#' This function produces a message denoting the end of the script including
#' the time when the script ended. This is important to check whether a script
#' did run successfully to its end.
#+ end-msg-fun, eval=FALSE
end_msg () {
    echo ""
    echo "End of $SCRIPT at: "`date +"%Y-%m-%d %H:%M:%S"`
    echo "********************************************************************************"
}

#' ### Log Message
#' Log messages formatted similarly to log4r are produced.
#+ log-msg-fun, eval=FALSE
log_msg () {
  local l_CALLER=$1
  local l_MSG=$2
  local l_RIGHTNOW=`date +"%Y%m%d%H%M%S"`
  echo "[${l_RIGHTNOW} -- ${l_CALLER}] $l_MSG"
}

#' ### Usage Message
#' Usage message giving help on how to use the script.
#+ usage-msg-fun, eval=FALSE
usage () {
    local l_MSG=$1
    >&2 echo "Usage Error: $l_MSG"
    >&2 echo "Usage: $SCRIPT -a <a_example> -b <b_example> -c"
    >&2 echo "  where -a <a_example> ..."
    >&2 echo "        -b <b_example> (optional) ..."
    >&2 echo "        -c (optional) ..."
    >&2 echo ""
    exit 1
}


#' ## Main Body of Script
#' The main body of the script starts here.
#+ start-msg, eval=FALSE
start_msg

#' ## Parse and check command line arguments
#' Use getopts for commandline argument parsing
#' If an option should be followed by an argument, it should be followed by a ":".
#' Notice there is no ":" after "h". The leading ":" suppresses error messages from
#' getopts. This is required to get my unrecognized option code to work.
#+ getopts-parsing, eval=FALSE
a_example=""
b_example=""
c_example=""
while getopts ":a:b:ch" FLAG; do
    case $FLAG in
        h)
            usage "Help message for $SCRIPT"
        ;;
        a)
            a_example=$OPTARG
# OR for files
            if test -f $OPTARG; then
                a_example=$OPTARG
            else
                usage "$OPTARG isn't a regular file"
            fi
# OR for directories
            if test -d $OPTARG; then
              a_example=$OPTARG
            else
              usage "$OPTARG isn't a directory"
            fi
        ;;
        b)
            b_example=$OPTARG
        ;;
        c)
            c_example="c_example_value"
        ;;
        :)
            usage "-$OPTARG requires an argument"
        ;;
        ?)
            usage "Invalid command line argument (-$OPTARG) found"
        ;;
    esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

#' ## Check whether required arguments have been specified
#' Arguments which are not allowed to have an empty value are to be checked in
#' this section.
#+ argument-test, eval=FALSE
if test "$a_example" == ""; then
    usage "-a a_example not defined"
fi


#' ## Check evaluation directory
#' This script must be run out of a subdirectory called 'prog'.
#+ dir-check, eval=FALSE
dir4check=$(echo $SCRIPT_DIR | rev | cut -d/ -f1 | rev)
if test "$dir4check" != "prog"; then
    >&2 echo "Error: This shell-script is not in a directory called prog"
    exit 1
fi

#' ## Change to evaluation directory
#' assign evaluation directory and change dir to it
#+ assign-eval-dir, eval=FALSE
EVAL_DIR=$(dirname $SCRIPT_DIR)
cd $EVAL_DIR


#' ## Your Code
#' Continue to put your code here
#+ your-code-here



#' ## End of Script
#' The script ends here with an end message.
#+ end-msg, eval=FALSE
end_msg

