#!/bin/bash
#' ---
#' title: __TITLE__
#' date:  __STARTDATE__
#' author: __AUTHOR__
#' ---
#' ## Purpose
#' __PURPOSE__ {Write a paragraph about what problems are solved with this script.}
#'
#' ## Description
#' __DESCRIPTION__ {Write a paragraph about how the problems are solved.}
#'
#' ## Details
#' __DETAILS__ {Give some more details here.}
#'
#' ## Example
#' __EXAMPLE__ {Specify an example call of the script.}
#'
#' ## Set Directives
#' General behavior of the script is driven by the following settings
#+ bash-env-setting, eval=FALSE
set -o errexit    # exit immediately, if single command exits with non-zero status
set -o nounset    # treat unset variables as errors
set -o pipefail   # return value of pipeline is value of last command to exit with non-zero status
                  #  hence pipe fails if one command in pipe fails

#' ## Global Constants
#' ### Paths to shell tools
#+ shell-tools, eval=FALSE
BASENAME=/usr/bin/basename                 # PATH to basename function                     #
DIRNAME=/usr/bin/dirname                   # PATH to dirname function                      #

#' ### Directories
#+ script-directories, eval=FALSE
INSTALLDIR=`$DIRNAME ${BASH_SOURCE[0]}`    # installation dir of bashtools on host         #
UTILDIR=__BASHTOOLUTILDIR__                # directory containing utilities of bashtools   #

#' ### Files and Hostname
#' This section stores the name of this script and the hostname in a variable. Both
#' variables are important for logfiles to be able to trace back which output was
#' produced by which script and on which server.
#+ script-files, eval=FALSE
SCRIPT=`$BASENAME ${BASH_SOURCE[0]}`       # Set Script Name variable                      #
SERVER=`hostname`


#' ## Use utilities
#' A common set of functionalities is stored in a utilities file. These are made available by
#' sourcing the utilities file.
#+ load-utilities, eval=FALSE
UTIL=$UTILDIR/bash_utils.sh
source $UTIL


#' ## Functions
#' In this section user-defined functions that are specific for this script are
#' defined in this section.


#' ## Main Body of Script
#' The main body of the script starts here.
#+ start-msg, eval=FALSE
start_msg $SCRIPT


#' ## Getopts for Commandline Argument Parsing
#' If an option should be followed by an argument, it should be followed by a ":".
#' Notice there is no ":" after "h". The leading ":" suppresses error messages from
#' getopts. This is required to get my unrecognized option code to work.
#+ getopts-parsing, eval=FALSE
a_example=""
b_example=""
c_example=""
while getopts ":a:b:ch" FLAG; do
  case $FLAG in
    h) # option -h shows usage
      usage $SCRIPT "Help message" "$SCRIPT -a <a_example>"
      ;;
    a)
      a_example=$OPTARG
# OR for files
#      check_exist_file_fail $OPTARG
# OR for directories
#      check_exist_dir_fail $OPTARG
      ;;
    b)
      b_example=$OPTARG
      ;;
    c)
      c_example="c_example_value"
      ;;
    :)
      usage "-$OPTARG requires an argument"
      ;;
    ?)
      usage "Invalid command line argument (-$OPTARG) found"
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.


#' ## Checks for Command Line Arguments
#' The following statements are used to check whether required arguments
#' have been assigned with a non-empty value
#+ argument-test, eval=FALSE
if test "$a_example" == ""; then
  usage $SCRIPT "-a a_example not defined" "$SCRIPT -a <a_example>"
fi


#' ## Your Code
#' Continue to put your code here
#+ your-code-here


#' ## End of Script
#+ end-msg, eval=FALSE
end_msg $SCRIPT

